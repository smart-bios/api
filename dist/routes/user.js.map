{"version":3,"sources":["../../src/routes/user.js"],"names":["ruta","post","auth","verifyAdministrador","req","res","body","User","findOne","email","user_email","bcrypt","hash","password","create","new_user","fs","mkdir","path","join","__dirname","_id","recursive","err","status","json","message","error","state","user","compare","match","payload","username","role","tokenReturn","token","encode","params","id","findByIdAndDelete","rmdir","messague"],"mappings":"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","sourcesContent":["import {Router} from 'express';\nimport User from '../models/user';\nimport auth from '../middllewares/auth';\nimport token from '../services/token';\nimport bcrypt from 'bcrypt';\nimport path from 'path'\nimport fs from 'fs'\n\nconst ruta = Router();\n\n\n/*\n|--------------------------------------------------------------------------\n| Add user\n|--------------------------------------------------------------------------\n*/\nruta.post('/add', auth.verifyAdministrador, async(req, res) => {\n//ruta.post('/add', async(req, res) => {\n\n    let body = req.body;     \n    try {    \n        let user_email = await User.findOne({email : req.body.email});\n        if(!user_email){\n\n            body.password = await bcrypt.hash(body.password, 10);\n            let new_user = await User.create(body);\n            fs.mkdir(path.join(__dirname, `../../storage/${new_user._id}/fastqc`), { recursive: true }, (err) => { \n                if (err) { \n                    res.status(500).json({\n                        status: 'failed',\n                        message: 'No se pudo registrar el usuario',\n                        err\n                    });\n                }\n\n                res.json({\n                    status: 'success',\n                    message: 'Usuario registrado en la base de datos',\n                });                    \n            });\n        }else{\n            res.json({\n                status: 'failed',\n                message: 'El email ya esta registrado en la base de datos'\n            });\n        }\n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            message: 'No se a podido registrar el usuario',\n            error\n        });\n    }\n});\n\n/*\n|--------------------------------------------------------------------------\n| Login\n|--------------------------------------------------------------------------\n*/\nruta.post('/login', async(req, res) => {\n    try {\n        let user = await User.findOne({email: req.body.email, state: true});\n        if(user){    \n            let match = await bcrypt.compare(req.body.password, user.password)\n            if(match){\n                const payload = {\n                    _id: user._id,\n                    username: user.username,\n                    email: user.email,\n                    role: user.role,\n                    state: user.state\n                }\n\n                let tokenReturn = token.encode(payload);\n                res.status(200).json({\n                        status: 'success',\n                        token: tokenReturn                 \n                });\n            }else{\n                res.status(401).json({\n                    status: 'failed',\n                    message: \"Username or password is incorrect\"\n                });\n            }\n\n        }else{\n            res.status(401).json({\n                status: 'failed',\n                message: 'This user does not exist!'\n            });\n        }\n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            message: 'Unable to Sign In',\n            error\n        })\n        \n    }\n})\n\n/*\n|--------------------------------------------------------------------------\n| Delete user\n|--------------------------------------------------------------------------\n*/\nruta.delete('/delete/:id', auth.verifyAdministrador, async(req, res) => {\n    \n    let _id = req.params.id;\n\n    try {\n        let user = await User.findByIdAndDelete({_id});\n\n        fs.rmdir(path.join(__dirname, '../../storage/'+user._id), {recursive: true}, (error) => { \n            if (error) { \n                res.status(500).json({\n                    status: 'failed',\n                    message: 'No se puede eliminar al ususario',\n                    error\n                })\n            } \n            res.json({\n                status: 'success',\n                messague: 'usuario eliminado',\n            })\n        });\n\n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            message: 'No se puede eliminar al ususario',\n            error\n        })\n    }    \n});\n\nexport default ruta"],"file":"user.js"}