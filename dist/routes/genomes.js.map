{"version":3,"sources":["../../src/routes/genomes.js"],"names":["ruta","post","req","res","Genoma","create","body","genoma","json","status","message","error","get","find","genomas","Ref","refs","tipo","params","_id","id","findOne"],"mappings":"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","sourcesContent":["import {Router} from 'express'\nimport Genoma from '../models/genome'\nimport Ref from '../models/reference'\n\nconst ruta = Router()\n\n/*\n|--------------------------------------------------------------------------\n| agregar genoma\n|--------------------------------------------------------------------------\n*/\nruta.post('/add', async(req,res)=> {\n    try {\n        let genoma = await Genoma.create(req.body)\n        res.json({\n            status: 'success',\n            message: 'genoma registrado en la base de datos',\n            genoma\n        });\n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            message: 'No se a podido registrar la muestra',\n            error\n        });\n        \n    }\n});\n\n/*\n|--------------------------------------------------------------------------\n| Listar todo los genomas\n|--------------------------------------------------------------------------\n*/\nruta.get('/list', async(req,res)=> {\n    try {\n        const genomas = await Genoma.find({})\n        //.populate(\"aislamiento\",{codigo: 1}) \n            res.json({\n                genomas,\n                status: \"success\"\n            })\n       } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error buscando`\n        })      \n    }\n});\n\nruta.get('/ref', async(req,res)=> {\n    try {\n        const refs = await Ref.find({})\n        //.populate(\"aislamiento\",{codigo: 1}) \n            res.json({\n                refs,\n                status: \"success\"\n            })\n       } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error list references`\n        })      \n    }\n});\n\n\n/*\n|--------------------------------------------------------------------------\n| buscar genoma por tipo\n|--------------------------------------------------------------------------\n*/\nruta.get('/search/:tipo', async(req,res)=> {\n    try {\n        const tipo = req.params.tipo\n        const genomas = await Genoma.find({ tipo })  \n            res.json({\n                genomas,\n                status: \"success\"\n            })\n\n    } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error buscando`\n        })\n    }\n});\n\n/*\n|--------------------------------------------------------------------------\n| Buscar un genoma\n|--------------------------------------------------------------------------\n*/\nruta.get('/:id', async(req, res)=> {\n    try {\n        const _id = req.params.id\n        const genoma = await Genoma.findOne({_id})\n        //.populate(\"aislamiento\")\n        res.json({\n            status: \"success\",\n            genoma\n        })\n    } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            error\n        })\n        \n    }\n});\n\n\n\nexport default ruta"],"file":"genomes.js"}