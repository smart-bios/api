{"version":3,"sources":["../../src/routes/tools.js"],"names":["ruta","post","req","res","params","type_blast","body","type","query","seq","database","db","max_target_seqs","tools","blast","err","output","json","error","status","message","input","target","forward","reverse","in_silico_pcr","result","amplicons","fastqc"],"mappings":"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","sourcesContent":["\nimport { Router } from 'express'; \nimport tools from '../services/biotools';\n\nconst ruta = Router();\n\n/*\n|--------------------------------------------------------------------------\n| blast\n|--------------------------------------------------------------------------\n*/\n\nruta.post('/blast', (req, res) =>{\n\n    let params = {\n        type_blast : req.body.type,\n        query: req.body.seq,\n        database: req.body.db,\n        max_target_seqs: req.body.max_target_seqs\n    }\n\n    try {\n        tools.blast(params, function (err, output) {\n            if (err) {\n              return res.json({error: err});\n            } \n            res.json({\n                status:'success',\n                message: 'Loading..',\n                blast: output\n            })    \n        });        \n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            error\n        });        \n    }    \n});\n/*\n|--------------------------------------------------------------------------\n| In silico PCR\n|--------------------------------------------------------------------------\n*/\n\nruta.post('/in_silico_pcr', (req, res) => {\n\n    let params = {\n        input: `/srv/ftp/Pseudomonas/${req.body.seq}/${req.body.seq}${req.body.target}`,\n        forward: req.body.forward,\n        reverse: req.body.reverse\n    }\n\n    try {\n        tools.in_silico_pcr(params, function(err, result, amplicons){\n            if(err){\n                return res.json({error: err});\n            }\n            res.json({\n                status: 'success',\n                result,\n                amplicons\n            }) \n         })\n        \n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            error\n        });    \n    }\n})\n\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Fastqc\n|--------------------------------------------------------------------------\n*/\nruta.post('/fastqc', async(req, res) => {\n    try {\n        tools.fastqc(req.body, function(err, result){\n            if(err){\n                res.json({\n                    status: 'failed',\n                    message: 'Fastqc failed',\n                    error: err\n                })\n            }\n\n            res.json({\n                status: 'success',\n                message: 'Fastqc complete',\n                result\n            })\n        })\n    } catch (error) {\n        res.status(500).json({\n            status: 'failed',\n            error\n        }); \n    }\n})\n\nexport default ruta"],"file":"tools.js"}