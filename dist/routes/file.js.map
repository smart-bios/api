{"version":3,"sources":["../../src/routes/file.js"],"names":["ruta","extensions","post","req","res","files","Object","keys","length","status","json","message","sampleFile","file","file_name","name","split","extension","indexOf","upload","user","body","id","filename","path","description","category","mv","err","Storage","create","result","get","_id","params","find","error","findOne","findByIdAndDelete","fs","unlink","setHeader","header","file_path","join","__dirname","download","console","log"],"mappings":"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","sourcesContent":["import {Router} from 'express';\nimport Storage from '../models/storage'\nimport fs from 'fs'\nimport path from 'path'\n\nconst ruta = Router();\nconst extensions = ['fasta','faa','ffn','fna','fa','fastq','fq','gz','tsv','cvs']\n\n\n/*\n|--------------------------------------------------------------------------\n| Upload file whith express-fileupload \n|--------------------------------------------------------------------------\n*/\nruta.post('/upload', (req, res) => {\n\n    if (!req.files || Object.keys(req.files).length === 0) {\n        res.status(406).json({\n            status: 'failed',\n            message: 'No files were uploaded.'\n        });\n    }\n\n    let sampleFile = req.files.file;\n    let file_name = sampleFile.name.split('.');\n    let extension = file_name[file_name.length -1];\n\n    if(extensions.indexOf(extension) < 0){\n        res.status(400).json({\n            status: 'failed',\n            message: 'La extension del archivo no es valida'\n        });\n    }\n\n    let upload = {\n        user: req.body.id,\n        filename: sampleFile.name,\n        path: `storage/${req.body.id}/${sampleFile.name}`,\n        description: req.body.description,\n        category: req.body.category\n    }\n\n    sampleFile.mv(upload.path, function(err) {\n        if (err){\n            return res.status(500).json({\n                status: 'failes',  \n                message: 'No se pudo subier el archivo',\n                err\n            });\n        }\n        Storage.create(upload, function(err, result){\n            \n            res.json({\n                status: 'success',\n                message: 'Archivo recibido',\n                result       \n            });\n        });\n    });\n})\n\n/*\n|--------------------------------------------------------------------------\n| List all files \n|--------------------------------------------------------------------------\n*/\nruta.get(\"/list/:id\", async(req, res) =>{\n    try {\n        let _id = req.params.id;\n        let result = await Storage.find({user: _id})\n        res.json({\n            status: 'success',\n            files: result\n        })\n    } catch (error) {\n        res.json({\n            status: 'failed',\n            error\n        })\n    }\n})\n\n\n/*\n|--------------------------------------------------------------------------\n| List files by category \n|--------------------------------------------------------------------------\n*/\nruta.post(\"/list\", async(req, res) =>{\n    try {\n        let result = await Storage.find({user: req.body.user, category: req.body.category})\n        res.json({\n            status: 'success',\n            result\n        })\n    } catch (error) {\n        res.json({\n            status: 'failed',\n            error\n        })\n    }\n})\n\n/*\n|--------------------------------------------------------------------------\n| Delete file\n|--------------------------------------------------------------------------\n*/\n\nruta.delete('/delete/:id', async(req, res) => {\n    const _id = req.params.id;\n    let file = await Storage.findOne({_id});\n    let name = await Storage.findByIdAndDelete({_id});\n\n    fs.unlink(file.path, (err) => {\n        if (err) { \n            return res.json({\n                status: 'failed',\n                err\n            })\n        } \n        res.json({\n            status: 'success',\n            path: name.file_name\n        })\n    })    \n})\n\n/*\n|--------------------------------------------------------------------------\n| Download file\n|--------------------------------------------------------------------------\n*/\n\nruta.get('/download/:id', async(req, res) => {\n    \n    let _id = req.params.id\n    Storage.findOne({_id}, function(err, file){\n        if(err){\n            res.status(406).json({\n                status: 'failed',\n                err\n            });\n        } \n\n        res.setHeader('Content-Disposition', 'attachment');\n        res.header(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        res.header(\"Pragma\", \"no-cache\");\n        res.header(\"Expires\", 0);\n\n        let file_path = path.join(__dirname,`../../${file.path}`)\n        res.download(file_path, (err)=>{\n            if(err){\n                res.status(406).json({\n                    status: 'failed',\n                    err\n                });\n                \n            }\n            console.log('Your file has been downloaded!')\n\n        });    \n    })\n})\n\nexport default ruta"],"file":"file.js"}