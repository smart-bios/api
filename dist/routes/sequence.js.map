{"version":3,"sources":["../../src/routes/sequence.js"],"names":["ruta","get","req","res","text","params","Prot","find","$or","id","$regex","$options","desc","preferred_name","funcional_COG","KEGG_pathway","resultados","length","json","cantidad","status","message","findOne","seq","error","Nucl","sequence"],"mappings":"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","sourcesContent":["import {Router} from 'express'\nimport Prot from '../models/protein'\nimport Nucl from '../models/nucleotide'\nconst ruta = Router()\n\n/*\n|--------------------------------------------------------------------------\n| Buscar secuencias anotadas por texto libre\n|--------------------------------------------------------------------------\n*/\nruta.get('/search/:text', async(req,res)=> {\n    try {\n        const text = req.params.text\n        const resultados = await Prot.find({ \n            $or: [\n                {id : {$regex : text , $options: 'i' }},\n                {desc: {$regex : text , $options: 'i' }},\n                {preferred_name: {$regex : text , $options: 'i' }},\n                {funcional_COG: {$regex : text , $options: 'i' }},\n                {KEGG_pathway: {$regex : text , $options: 'i' }}\n            ] \n            });\n        if(resultados.length > 0){\n            res.json({\n                resultados,\n                cantidad: resultados.length,\n                status: \"success\",\n                message: `${text} encontrado`\n            });\n        }else{\n            res.json({\n                resultados,\n                cantidad: resultados.length,\n                status: \"success\",\n                message: `No se encontro ${text}`\n            });\n        }\n    } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error buscando ${text}`\n        });        \n    }\n\n});\n\n/*\n|--------------------------------------------------------------------------\n| Obteber secuencia X\n|--------------------------------------------------------------------------\n*/\nruta.get('/:id', async(req,res)=>{\n\n    try {\n        const id = req.params.id\n        const seq = await Prot.findOne({id})\n        res.json({\n            status: \"success\",\n            message: `secuencia: ${id}`,\n            seq\n        });\n    } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error al obtener${id}`,\n            error\n        })\n    }    \n})\n\nruta.get('/nucl/:id', async(req,res)=>{\n\n    try {\n        const id = req.params.id\n        const seq = await Nucl.findOne({id},{sequence: 1})\n        res.json({\n            status: \"success\",\n            message: `secuencia: ${id}`,\n            seq\n        });\n    } catch (error) {\n        res.status(500).json({\n            status: \"failed\",\n            message: `Error al obtener${id}`,\n            error\n        })\n    }    \n})\n\nexport default ruta"],"file":"sequence.js"}