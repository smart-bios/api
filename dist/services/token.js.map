{"version":3,"sources":["../../src/services/token.js"],"names":["process","env","SECRET_KEY","encode","payload","token","jwt","sign","expiresIn","decode","verify","_id","User","findOne","state","user"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAGAA,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyB,iBAAzB;eAEe;AAEX;;;;;;AAMAC,EAAAA,MAAM,EAAE,gBAACC,OAAD,EAAa;AACjB,QAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAASH,OAAT,EAAkBJ,OAAO,CAACC,GAAR,CAAYC,UAA9B,EAAyC;AACnDM,MAAAA,SAAS,EAAE,KAAK,EAAL,GAAU,EAD8B,CAC1B;;AAD0B,KAAzC,CAAd;;AAIA,WAAOH,KAAP;AACH,GAdU;;AAgBX;;;;;;AAOCI,EAAAA,MAAM;AAAA,gGAAE,iBAAOJ,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAGeC,yBAAII,MAAJ,CAAWL,KAAX,EAAkBL,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAHf,EAGOS,GAHP,eAGOA,GAHP;AAAA;AAAA,qBAIkBC,iBAAKC,OAAL,CAAa;AAACF,gBAAAA,GAAG,EAAHA,GAAD;AAAMG,gBAAAA,KAAK,EAAC;AAAZ,eAAb,CAJlB;;AAAA;AAIKC,cAAAA,IAJL;;AAAA,mBAKEA,IALF;AAAA;AAAA;AAAA;;AAAA,+CAMUA,IANV;;AAAA;AAAA,+CAQU,KARV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAYM,KAZN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAvBI,C","sourcesContent":["import jwt from 'jsonwebtoken';\nimport User from '../models/user';\n\n\nprocess.env.SECRET_KEY = \"australopitecus\"\n\nexport default {\n\n    /*\n    |--------------------------------------------------------------------------\n    | Generar token para usuario logeado\n    | --------------------------------------------------------------------------\n    |\n     */\n    encode: (payload) => {\n        const token = jwt.sign(payload, process.env.SECRET_KEY,{\n            expiresIn: 60 * 60 * 24  // expires in 24 hours\n        })\n\n        return token\n    },\n\n    /*\n    |--------------------------------------------------------------------------\n    | Decodificar el token\n    | --------------------------------------------------------------------------\n    |\n     */\n\n     decode: async (token) => {\n\n        try {\n            const { _id } = jwt.verify(token, process.env.SECRET_KEY);\n            const user = await User.findOne({_id, state:true});\n            if(user){\n                return user;\n            }else {\n                return false;\n            }\n        } catch (error) {\n            //const newToken = await checkToken(token);\n            return false;\n        }\n    }\n\n}"],"file":"token.js"}