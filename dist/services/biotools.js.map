{"version":3,"sources":["../../src/services/biotools.js"],"names":["home","os","homedir","databasesRoot","path","join","threads","parseSummary","summary","data","fs","readFileSync","headers","sumary","tsv2JsonNoHead","splice","parseFastqData","fastqc_data","lines","split","statistics","slice","map","line","reduce","obj","nextKey","index","tsv","tsv2Json","shift","getPaths","user","project_name","user_dir","__dirname","project_dir","paths","blast","input","cb","database","console","log","outfmt","result","seq","query","blastcmd","type_blast","stdout","on","stdin","write","stderr","error","code","end","toString","result_obj","in_silico_pcr","pcr","amplicon","cmd","forward","reverse","fastqc","url","name","fq","output","basemame","basename","cmd_fastqc","basic","err"],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport os from 'os'\n\nconst home = os.homedir()\nconst databasesRoot = path.join(home,'databases');\nconst threads = 4\n\nfunction parseSummary(summary){\n    let data = fs.readFileSync(summary,'utf8')\n    let headers = ['status','module','library']\n    let sumary = tsv2JsonNoHead(data, headers)\n    return sumary.splice(1)\n}\n\nfunction parseFastqData(fastqc_data){\n    let data = fs.readFileSync(fastqc_data,'utf8')\n    let lines = data.split('\\n')\n    let headers = ['measure','value']\n    let statistics = lines.slice(3,10)\n    return statistics.map(line => {\n        let data = line.split('\\t');\n        return headers.reduce((obj, nextKey, index) => {\n            obj[nextKey] = data[index];\n            return obj;\n        }, {});\n    })\n}\nfunction tsv2JsonNoHead(tsv, headers){\n    let lines = tsv.split('\\n');\n    return lines.map(line => {\n        let data = line.split('\\t');\n        return headers.reduce((obj, nextKey, index) => {\n            obj[nextKey] = data[index];\n            return obj;\n        }, {});\n    })\n}\n\nfunction tsv2Json(tsv){\n    let lines = tsv.split('\\n');\n    let headers = lines.shift().split('\\t');\n    return lines.map(line => {\n        let data = line.split('\\t');\n        return headers.reduce((obj, nextKey, index) => {\n            obj[nextKey] = data[index];\n            return obj;\n        }, {});\n    })\n}\n\nfunction getPaths(user, project_name){\n    let user_dir = path.join(__dirname, `../../storage/${user}`)\n    let project_dir =  `${user_dir}/${project_name}`\n    let paths = {\n        user_dir,\n        project_dir,\n    }\n    return  paths\n}\nexport default {\n\n    /*\n    |--------------------------------------------------------------------------\n    | Blast\n    |--------------------------------------------------------------------------\n    */\n    blast: (input, cb) => {\n        \n        let database = path.join(databasesRoot, input.database)\n        console.log(`Database: ${database}`)\n        let outfmt = \"6 qseqid qlen sseqid slen stitle pident qcovs length mismatch gapopen evalue bitscore\"\n        let headers = ['qseqid', 'qlen', 'sseqid', 'slen','stitle', 'pident', 'qcovs','length', 'mismatch', 'gapopen', 'evalue', 'bitscore']         \n        let result = ''\n\n        const seq = spawn('echo',[`${input.query}`])\n        const blastcmd = spawn(`${input.type_blast}`, ['-db', `${database}`, '-num_threads', 4, '-outfmt', `${outfmt}`])\n\n        seq.stdout.on('data', (data) => { blastcmd.stdin.write(data)});\n        seq.stderr.on('data', (data) => { console.error(`stderr seq: ${data}`);});\n        seq.on('close', (code) => {\n            if (code !== 0) {console.log(`echo process exited with code ${code}`);}\n            blastcmd.stdin.end();\n        });\n        \n        blastcmd.stdout.on('data', (data) => { result += data.toString();});    \n        blastcmd.stderr.on('data', (data) => { console.error(`blastcmd stderr: ${data}`);});\n        \n        blastcmd.on('close', (code) => {\n            console.log(`blastcmd process exited with code ${code}`);\n            let result_obj = tsv2JsonNoHead(result, headers)\n            return cb(null, result_obj);\n        });\n\n    },\n    /*\n    |--------------------------------------------------------------------------\n    | in silico PCR\n    |--------------------------------------------------------------------------\n    */\n    in_silico_pcr: (input, cb) => {\n        let pcr = '';\n        let amplicon = '';\n        const cmd = spawn('in_silico_PCR.pl', ['-s', `${input.input}` ,'-a',`${input.forward}`,'-b',`${input.reverse}`]);\n        cmd.stdout.on('data', (data) => {\n            //console.log(data.toString())\n            pcr += data.toString();\n        })\n        cmd.stderr.on('data', (data) => {\n            //console.log(data.toString())\n            amplicon += data.toString();\n        })\n    \n        cmd.on('close', (code) => {\n            console.log(`insilico_pcr process exited with code ${code}`);\n            let result = tsv2Json(pcr)\n            return cb(null, result, amplicon)\n        })\n    },\n\n\n    /*\n    |--------------------------------------------------------------------------\n    | Fastqc\n    |--------------------------------------------------------------------------\n    */\n    fastqc: (input, cb) => {\n       let url = getPaths(input.user, input.name)\n       let fq =  path.join(__dirname, `../../${input.fq}`)\n       let output = path.join(url.user_dir, 'fastqc')\n       let basemame = path.basename(input.fq, '.fastq.gz');\n       \n       const cmd_fastqc = spawn('fastqc',['-t', 2, '-o', output, '--extract', fq])\n       cmd_fastqc.stderr.on('data', (data) => {console.log(data.toString())});\n       \n       cmd_fastqc.on('close', (code) => {\n           console.log(`fastqc process exited with code ${code}`);\n            if(code == 0){\n                let basic = parseFastqData(`${output}/${basemame}_fastqc/fastqc_data.txt`)\n                let summary = parseSummary(`${output}/${basemame}_fastqc/summary.txt`)\n                return cb(null, {\n                    basic,\n                    summary\n                })\n\n            }else{\n                return cb(err, null, null)\n            }            \n        })\n    },\n}"],"file":"biotools.js"}