{"version":3,"sources":["../../src/middllewares/auth.js"],"names":["verifyUsuario","req","res","next","headers","token","status","send","message","tokenService","decode","response","role","verifyAdministrador"],"mappings":";;;;;;;;;;;;;AAAA;;eAEe;AAEX;;;;;AAKAA,EAAAA,aAAa;AAAA,uGAAE,iBAAOC,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAENF,GAAG,CAACG,OAAJ,CAAYC,KAFN;AAAA;AAAA;AAAA;;AAAA,+CAGAH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,gBAAAA,MAAM,EAAE,QADgB;AAExBE,gBAAAA,OAAO,EAAE;AAFe,eAArB,CAHA;;AAAA;AAAA;AAAA,qBASYC,kBAAaC,MAAb,CAAoBT,GAAG,CAACG,OAAJ,CAAYC,KAAhC,CATZ;;AAAA;AASLM,cAAAA,QATK;;AAAA,oBAUPA,QAAQ,CAACC,IAAT,KAAkB,YAAlB,IAAkCD,QAAQ,CAACC,IAAT,KAAkB,WAV7C;AAAA;AAAA;AAAA;;AAWPT,cAAAA,IAAI;AAXG;AAAA;;AAAA;AAAA,+CAaAD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,gBAAAA,MAAM,EAAE,QADgB;AAExBE,gBAAAA,OAAO,EAAE;AAFe,eAArB,CAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAPF;;AA2BX;;;;;AAMAK,EAAAA,mBAAmB;AAAA,6GAAE,kBAAOZ,GAAP,EAAWC,GAAX,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACZF,GAAG,CAACG,OAAJ,CAAYC,KADA;AAAA;AAAA;AAAA;;AAAA,gDAENH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,gBAAAA,MAAM,EAAE,QADgB;AAExBE,gBAAAA,OAAO,EAAE;AAFe,eAArB,CAFM;;AAAA;AAAA;AAAA,qBAOMC,kBAAaC,MAAb,CAAoBT,GAAG,CAACG,OAAJ,CAAYC,KAAhC,CAPN;;AAAA;AAOXM,cAAAA,QAPW;;AAAA,oBAQbA,QAAQ,CAACC,IAAT,KAAkB,YARL;AAAA;AAAA;AAAA;;AASbT,cAAAA,IAAI;AATS;AAAA;;AAAA;AAAA,gDAWND,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,gBAAAA,MAAM,EAAE,QADgB;AAExBE,gBAAAA,OAAO,EAAE;AAFe,eAArB,CAXM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjCR,C","sourcesContent":["import tokenService from '../services/token';\n\nexport default {\n\n    /*\n    |--------------------------------------------------------------------------\n    | Permiso para todo los usuarios\n    |--------------------------------------------------------------------------\n    */\n    verifyUsuario: async (req,res,next) => {\n\n        if (!req.headers.token){\n            return res.status(401).send({\n                status: 'failed',\n                message: 'No posee las credenciales para contiunar'\n            });\n        }\n        \n        const response = await tokenService.decode(req.headers.token);\n        if (response.role === 'ADMIN_ROLE' || response.role === 'USER_ROLE'){\n            next();\n        } else{\n            return res.status(403).send({\n                status: 'failed',\n                message: 'No tiene los permisos necesarios'\n            });\n        }\n    },\n\n    /*\n    |--------------------------------------------------------------------------\n    | Permiso para solo administradores\n    |--------------------------------------------------------------------------\n    */\n\n    verifyAdministrador: async (req,res,next) => {\n        if (!req.headers.token){\n            return res.status(401).send({\n                status: 'failed',\n                message: 'No posee las credenciales para contiunar'\n            });\n        }\n        const response = await tokenService.decode(req.headers.token);\n        if (response.role === 'ADMIN_ROLE'){\n            next();\n        } else{\n            return res.status(403).send({\n                status: 'failed',\n                message: 'No tiene los permisos necesarios'\n            });\n        }\n    }\n}"],"file":"auth.js"}